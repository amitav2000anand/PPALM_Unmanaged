name: release-solution-to-uat-prod

# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts
# Commented out on:pull_request- workflow should not fire-Testing
on:
  workflow_dispatch:
# on:
#   pull_request:
#     types:
#       - closed
#     branches:
#       - main
      
#   workflow_dispatch:
env:
  DEV_ENVIRONMENT_URL: ${{ secrets.ENVIRONMENT_URL }}
  BUILD_ENVIRONMENT_URL: ${{ secrets.BUILD_ENVIRONMENT_URL }}
  PROD_ENVIRONMENT_URL: ${{ secrets.PRODUCTION_ENVIRONMENT_URL }}
  CLIENT_ID: ${{ secrets.POWERPLATFORM_CLIENT_ID }}
  TENANT_ID: ${{ secrets.POWERPLATFORM_TENANT_ID }}
  SECRET: ${{ secrets.POWERPLATFORMSPN }}
  solution_name: SelfServiceAgent
  solution_shipping_folder: out/ship
  solution_outbound_folder: out/solutions
  solution_source_folder: solutions
  solution_settings_folder: settings
  solution_release_folder: out/release
  UAT_solution_settings_name: DeploymentSettings-UAT.json
  PROD_solution_settings_name: DeploymentSettings-Prod.json
  SOLUTION_VERSION: 1.2.${{ github.run_number }}.0
permissions:
  contents: write

jobs:
  deploy-to-uat:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Microsoft PowerApps CLI Tool
        run: dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ env.BUILD_ENVIRONMENT_URL }}
          user-name: ${{ secrets.UAT_POWER_PLATFORM_USERNAME }}
          password-secret: ${{ secrets.UAT_SERVICE_ACCOUNT_PASSWORD }}

      - name: Pack solution from source control into a solution.zip
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ env.solution_source_folder }}/${{ env.solution_name }}
          solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
          solution-type: Managed

      - name: Import solution as managed to uat env
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ env.BUILD_ENVIRONMENT_URL }}
          # app-id: ${{ env.CLIENT_ID }}
          # client-secret: ${{ env.SECRET }}
          # tenant-id: ${{ env.TENANT_ID }}
          user-name: ${{ secrets.UAT_POWER_PLATFORM_USERNAME }}
          password-secret: ${{ secrets.UAT_SERVICE_ACCOUNT_PASSWORD }} 
          solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
          # stage-and-upgrade: true
          use-deployment-settings-file: true
          deployment-settings-file: settings/DeploymentSettings-UAT.json
          force-overwrite: true
          publish-changes: true
          run-asynchronously: true
          max-async-wait-time: 60
            
      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.solution_name }}_managed
          path: ${{ env.solution_outbound_folder }}/

      # - name: Install PowerShell modules and update flow ownership
      #   shell: pwsh
      #   run: |
      #     Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -AllowClobber
      #     Install-Module -Name AzureAD -Force -AllowClobber

      #     # Authenticate with Power Platform
      #     $securePass = ConvertTo-SecureString "${{ secrets.UAT_POWER_PLATFORM_PASSWORD }}" -AsPlainText -Force
      #     $cred = New-Object System.Management.Automation.PSCredential ("${{ secrets.UAT_POWER_PLATFORM_USERNAME }}", $securePass)
      #     # Add-PowerAppsAccount -Credential $cred
          
      #     Add-PowerAppsAccount `
      #       -ApplicationId "${{ env.CLIENT_ID }}" `
      #       -TenantId "${{ env.TENANT_ID }}" `
      #       -ClientSecret "${{ env.SECRET }}"

      #     # Authenticate with Azure AD
      #     $aadPass = ConvertTo-SecureString "${{ secrets.AZURE_AD_PASSWORD }}" -AsPlainText -Force
      #     $aadCred = New-Object System.Management.Automation.PSCredential ("${{ secrets.AZURE_AD_USERNAME }}", $aadPass)
      #     # Connect-AzureAD -Credential $aadCred

      #     # Define environment, solution, and service account
      #     $environmentName = "${{ env.BUILD_ENVIRONMENT_URL }}"
      #     $solutionName = "${{ env.solution_name }}"
      #     $serviceAccountEmail = "${{ secrets.UAT_POWER_PLATFORM_USERNAME }}"

      #     Install-Module Microsoft.Graph -Scope CurrentUser -Force -AllowClobber
          
      #     Connect-MgGraph -ClientId "${{ env.CLIENT_ID }}" -TenantId "${{ env.TENANT_ID }}" -ClientSecret "${{ env.SECRET }}" -Scopes "https://graph.microsoft.com/.default"

      #     # Get the Object ID of the service account
      #     # $serviceAccount = Get-AzureADUser -ObjectId $serviceAccountEmail
      #     $serviceAccount = Get-MgUser -UserId "<service-account-email>"
      #     $objectId = $serviceAccount.Id


      #     # Get all flows in the solution
      #     $solutionComponents = Get-AdminPowerAppSolutionComponent -EnvironmentName $environmentName -SolutionName $solutionName
      #     $flows = $solutionComponents | Where-Object { $_.ComponentType -eq 5 }  # 5 = Flow

      #     # Loop through each flow and assign ownership
      #     foreach ($flow in $flows) {
      #         $flowName = $flow.ComponentName
      #         Write-Host "Updating owner for flow: $flowName"
      #         Set-AdminFlowOwnerRole -EnvironmentName $environmentName `
      #                                -FlowName $flowName `
      #                                -PrincipalType User `
      #                                -RoleName CanEdit `
      #                                -PrincipalObjectId $serviceAccount.ObjectId
      #     }

      #     Write-Host "✅ Flow ownership update completed."

  deploy-to-prod:
    needs: [deploy-to-uat]
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    environment:
      name: PROD  

    steps:
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
        
      - name: Debug solution steps
        run: 'echo "Steps for Production Deployment"'

      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ env.PROD_ENVIRONMENT_URL }}
          user-name: ${{ secrets.PROD_SERVICE_ACCOUNT_USERNAME }}
          password-secret: ${{ secrets.PROD_SERVICE_ACCOUNT_PASSWORD }} 
        
      - name: Fetch the ready to ship solution from GH artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.solution_name }}_managed
          path: ${{ env.solution_outbound_folder }}/

      - name: Import solution to prod env
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ env.PROD_ENVIRONMENT_URL }}
          # app-id: ${{ env.CLIENT_ID }}
          # client-secret: ${{ env.SECRET }}
          # tenant-id: ${{ env.TENANT_ID }}
          user-name: ${{ secrets.PROD_SERVICE_ACCOUNT_USERNAME }}
          password-secret: ${{ secrets.PROD_SERVICE_ACCOUNT_PASSWORD }} 
          solution-file: ${{ env.solution_outbound_folder }}/${{ env.solution_name }}_managed.zip
          # stage-and-upgrade: true
          use-deployment-settings-file: true
          deployment-settings-file: settings/DeploymentSettings-Prod.json
          force-overwrite: true
          publish-changes: true
          run-asynchronously: true
          max-async-wait-time: 60
